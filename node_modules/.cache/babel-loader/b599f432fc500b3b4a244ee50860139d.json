{"ast":null,"code":"import _regeneratorRuntime from\"/Users/gerardocedeno/Development/React/pkmn-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/gerardocedeno/Development/React/pkmn-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/gerardocedeno/Development/React/pkmn-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext,useEffect}from'react';import{useCallback}from'react';import{pkmns}from'./pkmns';import paginate from'./utils';var AppContext=React.createContext();var AppProvider=function AppProvider(_ref){var children=_ref.children;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),data=_useState4[0],setData=_useState4[1];var _useState5=useState(17),_useState6=_slicedToArray(_useState5,2),page=_useState6[0],setPage=_useState6[1];var fetchPokemons=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setLoading(true);try{setData(paginate(pkmns));setLoading(false);}catch(error){console.error('An error occurred while getting Pokemon list. Error: ',error);}case 2:case\"end\":return _context.stop();}}},_callee);})),[]);useEffect(function(){fetchPokemons();},[fetchPokemons]);return/*#__PURE__*/React.createElement(AppContext.Provider,{value:{loading:loading,data:data,page:page,setPage:setPage}},children);};// make sure use\nexport var useGlobalContext=function useGlobalContext(){return useContext(AppContext);};export{AppContext,AppProvider};","map":{"version":3,"sources":["/Users/gerardocedeno/Development/React/pkmn-project/src/context.js"],"names":["React","useState","useContext","useEffect","useCallback","pkmns","paginate","AppContext","createContext","AppProvider","children","loading","setLoading","data","setData","page","setPage","fetchPokemons","error","console","useGlobalContext"],"mappings":"2fAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,CAAsCC,SAAtC,KAAuD,OAAvD,CACA,OAASC,WAAT,KAA4B,OAA5B,CACA,OAASC,KAAT,KAAsB,SAAtB,CACA,MAAOC,CAAAA,QAAP,KAAqB,SAArB,CAEA,GAAMC,CAAAA,UAAU,CAAGP,KAAK,CAACQ,aAAN,EAAnB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eACNT,QAAQ,CAAC,IAAD,CADF,wCAC7BU,OAD6B,eACpBC,UADoB,8BAEZX,QAAQ,CAAC,EAAD,CAFI,yCAE7BY,IAF6B,eAEvBC,OAFuB,8BAGZb,QAAQ,CAAC,EAAD,CAHI,yCAG7Bc,IAH6B,eAGvBC,OAHuB,eAKpC,GAAMC,CAAAA,aAAa,CAAGb,WAAW,sEAAC,mIAChCQ,UAAU,CAAC,IAAD,CAAV,CAEA,GAAI,CACFE,OAAO,CAACR,QAAQ,CAACD,KAAD,CAAT,CAAP,CACAO,UAAU,CAAC,KAAD,CAAV,CACD,CAAC,MAAOM,KAAP,CAAc,CACdC,OAAO,CAACD,KAAR,CACE,uDADF,CAEEA,KAFF,EAID,CAX+B,sDAAD,GAY9B,EAZ8B,CAAjC,CAcAf,SAAS,CAAC,UAAM,CACdc,aAAa,GACd,CAFQ,CAEN,CAACA,aAAD,CAFM,CAAT,CAIA,mBACE,oBAAC,UAAD,CAAY,QAAZ,EAAqB,KAAK,CAAE,CAAEN,OAAO,CAAPA,OAAF,CAAWE,IAAI,CAAJA,IAAX,CAAiBE,IAAI,CAAJA,IAAjB,CAAuBC,OAAO,CAAPA,OAAvB,CAA5B,EACGN,QADH,CADF,CAKD,CA5BD,CA6BA;AACA,MAAO,IAAMU,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CACpC,MAAOlB,CAAAA,UAAU,CAACK,UAAD,CAAjB,CACD,CAFM,CAIP,OAASA,UAAT,CAAqBE,WAArB","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { useCallback } from 'react'\nimport { pkmns } from './pkmns'\nimport paginate from './utils'\n\nconst AppContext = React.createContext()\n\nconst AppProvider = ({ children }) => {\n  const [loading, setLoading] = useState(true)\n  const [data, setData] = useState([])\n  const [page, setPage] = useState(17)\n\n  const fetchPokemons = useCallback(async () => {\n    setLoading(true)\n\n    try {\n      setData(paginate(pkmns))\n      setLoading(false)\n    } catch (error) {\n      console.error(\n        'An error occurred while getting Pokemon list. Error: ',\n        error\n      )\n    }\n  }, [])\n\n  useEffect(() => {\n    fetchPokemons()\n  }, [fetchPokemons])\n\n  return (\n    <AppContext.Provider value={{ loading, data, page, setPage }}>\n      {children}\n    </AppContext.Provider>\n  )\n}\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext)\n}\n\nexport { AppContext, AppProvider }\n"]},"metadata":{},"sourceType":"module"}